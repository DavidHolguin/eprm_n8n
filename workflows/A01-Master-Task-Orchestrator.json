{
  "name": "[A01] Master-Task-Orchestrator (Compatible)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "task-orchestrator",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "11a7b015-518e-4d53-ad6a-b632dc91e7ff",
      "name": "Webhook - Ingesta de Tarea",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1040,
        80
      ],
      "webhookId": "task-orchestrator-webhook"
    },
    {
      "parameters": {
        "jsCode": "const body = $input.item.json.body || {};\nconst { organization_id, creator_user_id, task_type } = body;\n\n// 1. Validar la presencia de campos clave\nif (!organization_id || !creator_user_id || !task_type) {\n  console.log('Validación fallida: Faltan campos requeridos.', body);\n  return {\n    isValid: false,\n    error: 'Input validation failed: Missing organization_id, creator_user_id, or task_type.'\n  };\n}\n\n// 2. Si la validación es exitosa, retornar el objeto estructurado\nconst parameters = body.parameters || {};\nconst priority = body.priority || 0;\nconst project_id = body.project_id || null;\n\nreturn {\n  isValid: true,\n  data: {\n    organization_id,\n    creator_user_id,\n    task_type,\n    parameters,\n    priority,\n    project_id,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "0dd8959c-ea01-4dbc-b206-f7e1f1a7bc5a",
      "name": "1. Validar y Estructurar Parámetros",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        80
      ]
    },
    {
      "parameters": {
        "operation": "customApiCall",
        "httpMethod": "POST",
        "path": "/rpc/route_task_request",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($('1. Validar y Estructurar Parámetros').item.json.data) }}"
      },
      "id": "f5c4dd43-96c2-44d4-a6bf-8acf0c97a0e9",
      "name": "Llamar a public.route_task_request",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -360,
        0
      ],
      "credentials": {
        "supabaseApi": {
          "id": "9XlWn9W6ZDhQTb8Z",
          "name": "Supabase EPRM"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "0185973b-55a0-4089-8d14-3deea1c8f15d",
              "leftValue": "={{ $('1. Validar y Estructurar Parámetros').item.json.isValid }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "2d947178-0466-4e50-a94f-a99166f36934",
      "name": "2. ¿Son Válidos los Parámetros?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -580,
        80
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "764b8ddb-2a4c-4235-8664-96654e99f11a",
              "leftValue": "={{ $json.body.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "60cbd98e-5856-4226-9fd2-e41ff7df704c",
      "name": "3. ¿Asignación Exitosa?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -140,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "const result = $input.item.json.body;\nconst task_id = result.task_id;\nconst assigned_agent_id = result.assigned_agent_id;\nconst agent_capability = result.agent_capability;\nif (!task_id || !assigned_agent_id) {\n  throw new Error('No task_id or assigned_agent_id returned from route_task_request');\n}\nlet subworkflow_name = '';\nif (agent_capability) {\n  const words = agent_capability.split('_');\n  const camelCase = words.map(word => \n    word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\n  ).join('');\n  subworkflow_name = `[MCP-SUB] ${assigned_agent_id}-${camelCase}`;\n}\nreturn {\n  task_id,\n  assigned_agent_id,\n  agent_capability,\n  subworkflow_name,\n  original_parameters: $input.first().json.data?.parameters || {}\n};"
      },
      "id": "4d343c30-b85a-473a-a6cb-760d73b460de",
      "name": "Determinar Subworkflow de Agente",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        -80
      ]
    },
    {
      "parameters": {
        "workflowId": "={{ $json.subworkflow_name }}",
        "options": {}
      },
      "id": "f3958a45-f101-4e0f-9835-e81d642a8bdd",
      "name": "Ejecutar Subworkflow de Agente",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        300,
        -80
      ]
    },
    {
      "parameters": {
        "useCustomSchema": true,
        "operation": "update",
        "tableId": "tasks",
        "filterType": "manual",
        "matchConditions": [
          {
            "column": "task_id",
            "operator": "eq",
            "value": "={{ $('Determinar Subworkflow de Agente').item.json.task_id }}"
          }
        ],
        "updateData": {
          "status": "completed_success",
          "completed_at": "={{ new Date().toISOString() }}"
        }
      },
      "id": "56aa6d00-a3a0-40dc-9eac-e972384d6aed",
      "name": "Actualizar Tarea a Éxito",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        520,
        -80
      ],
      "credentials": {
        "supabaseApi": {
          "id": "9XlWn9W6ZDhQTb8Z",
          "name": "Supabase EPRM"
        }
      }
    },
    {
      "parameters": {
        "workflowId": "[CORE] Handle-Error-and-Retry",
        "options": {},
        "data": "={{ JSON.stringify({\n  task_id: $('Llamar a public.route_task_request').item.json.body.task_id || null,\n  error_message: $('Llamar a public.route_task_request').item.json.body.error || 'Unknown routing error',\n  workflow_to_retry_id: $workflow.id,\n  workflow_params: $('1. Validar y Estructurar Parámetros').item.json.data,\n  agent_id: 'A01'\n}) }}"
      },
      "id": "new-error-handler-node",
      "name": "Ejecutar [CORE] Handle-Error-and-Retry",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        80,
        80
      ]
    },
    {
      "parameters": {
        "operation": "customApiCall",
        "httpMethod": "POST",
        "path": "/rpc/log_event",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  log_level: 'INFO',\n  log_message: 'Task orchestration completed successfully.',\n  task_id: $('Determinar Subworkflow de Agente').item.json.task_id,\n  agent_id: 'A01',\n  details: {\n    assigned_agent: $('Determinar Subworkflow de Agente').item.json.assigned_agent_id,\n    executed_subworkflow: $('Determinar Subworkflow de Agente').item.json.subworkflow_name\n  }\n}) }}"
      },
      "id": "65e673e6-cb4d-460a-ae8f-4369c9a45bdf",
      "name": "Log de Éxito vía public.log_event",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        740,
        -80
      ],
      "credentials": {
        "supabaseApi": {
          "id": "9XlWn9W6ZDhQTb8Z",
          "name": "Supabase EPRM"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  success: true,\n  task_id: $('Determinar Subworkflow de Agente').item.json.task_id,\n  assigned_agent_id: $('Determinar Subworkflow de Agente').item.json.assigned_agent_id,\n  status: 'completed_success'\n}) }}",
        "options": {}
      },
      "id": "4c00c4e7-0ce9-45b9-af4a-60d97db03a51",
      "name": "Respuesta de Éxito",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        960,
        -80
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  success: false,\n  error: $('1. Validar y Estructurar Parámetros').item.json.error\n}) }}",
        "options": {
          "responseCode": 400,
          "responseHeaders": {
            "additionalHeaders": true,
            "headers": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "7092feff-77c6-4dd1-a360-34fdf0c6230b",
      "name": "Respuesta de Error de Validación",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -580,
        280
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook - Ingesta de Tarea": {
      "main": [
        [
          {
            "node": "1. Validar y Estructurar Parámetros",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1. Validar y Estructurar Parámetros": {
      "main": [
        [
          {
            "node": "2. ¿Son Válidos los Parámetros?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Llamar a public.route_task_request": {
      "main": [
        [
          {
            "node": "3. ¿Asignación Exitosa?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. ¿Son Válidos los Parámetros?": {
      "main": [
        [
          {
            "node": "Llamar a public.route_task_request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respuesta de Error de Validación",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3. ¿Asignación Exitosa?": {
      "main": [
        [
          {
            "node": "Determinar Subworkflow de Agente",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ejecutar [CORE] Handle-Error-and-Retry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Determinar Subworkflow de Agente": {
      "main": [
        [
          {
            "node": "Ejecutar Subworkflow de Agente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ejecutar Subworkflow de Agente": {
      "main": [
        [
          {
            "node": "Actualizar Tarea a Éxito",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Actualizar Tarea a Éxito": {
      "main": [
        [
          {
            "node": "Log de Éxito vía public.log_event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log de Éxito vía public.log_event": {
      "main": [
        [
          {
            "node": "Respuesta de Éxito",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "robust-validation-compatible-fix",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "ycsmud4dqc591rYq",
  "tags": [
    {
      "id": "IfNHf1aQQHTUEPOZ",
      "name": "Agent 01"
    },
    {
      "id": "cqfcJggpUKXMyEV2",
      "name": "Orchestration"
    }
  ]
}