{
  "name": "[MCP-SUB] A01-HandleMCPRequest",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "mcp-server",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "mcp1a2b3-c4d5-6789-abcd-mcp123456789",
      "name": "MCP Webhook Server",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "mcp-server-webhook"
    },
    {
      "parameters": {
        "functionCode": "// Parse and validate JSON-RPC 2.0 MCP request\nconst body = $json.body || {};\nconst headers = $json.headers || {};\n\n// Validate JSON-RPC 2.0 structure\nif (!body.jsonrpc || body.jsonrpc !== '2.0') {\n  throw new Error('Invalid JSON-RPC version. Expected 2.0');\n}\n\nif (!body.method) {\n  throw new Error('Missing method in JSON-RPC request');\n}\n\nif (!body.id) {\n  throw new Error('Missing id in JSON-RPC request');\n}\n\n// Extract MCP-specific parameters\nconst method = body.method;\nconst params = body.params || {};\nconst request_id = body.id;\n\n// Validate authentication token if present\nconst auth_token = headers.authorization || headers.Authorization;\nlet authenticated = false;\nlet auth_error = null;\n\nif (auth_token) {\n  try {\n    // Basic JWT validation (in production, verify signature)\n    if (auth_token.startsWith('Bearer ')) {\n      const token = auth_token.substring(7);\n      // For now, accept any Bearer token format\n      // TODO: Implement proper JWT verification\n      authenticated = true;\n    } else {\n      auth_error = 'Invalid authorization header format';\n    }\n  } catch (e) {\n    auth_error = `Authentication error: ${e.message}`;\n  }\n} else {\n  auth_error = 'Missing authorization header';\n}\n\nreturn {\n  jsonrpc: body.jsonrpc,\n  method: method,\n  params: params,\n  request_id: request_id,\n  authenticated: authenticated,\n  auth_error: auth_error,\n  timestamp: new Date().toISOString(),\n  client_ip: headers['x-forwarded-for'] || headers['x-real-ip'] || 'unknown'\n};"
      },
      "id": "mcp2b3c4-d5e6-7890-bcde-mcp234567890",
      "name": "Parse MCP Request",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "auth-check",
              "leftValue": "={{ $json.authenticated }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "mcp3c4d5-e6f7-8901-cdef-mcp345678901",
      "name": "Check Authentication",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  jsonrpc: '2.0',\n  error: {\n    code: -32001,\n    message: 'Authentication failed',\n    data: {\n      error: $json.auth_error,\n      timestamp: $json.timestamp\n    }\n  },\n  id: $json.request_id\n}) }}",
        "options": {
          "responseCode": 401
        }
      },
      "id": "mcp4d5e6-f7g8-9012-defg-mcp456789012",
      "name": "Authentication Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        900,
        400
      ]
    },
    {
      "parameters": {
        "functionCode": "// Process authenticated MCP request and extract task parameters\nconst mcpRequest = $json;\n\n// Handle different MCP methods\nswitch (mcpRequest.method) {\n  case 'tasks/execute':\n    // Extract task execution parameters\n    const task_type = mcpRequest.params.task_type;\n    const parameters = mcpRequest.params.parameters || {};\n    const organization_id = mcpRequest.params.organization_id;\n    const creator_user_id = mcpRequest.params.creator_user_id;\n    const priority = mcpRequest.params.priority || 0;\n    const project_id = mcpRequest.params.project_id || null;\n    \n    if (!task_type) {\n      throw new Error('Missing task_type in MCP request');\n    }\n    \n    if (!organization_id) {\n      throw new Error('Missing organization_id in MCP request');\n    }\n    \n    if (!creator_user_id) {\n      throw new Error('Missing creator_user_id in MCP request');\n    }\n    \n    return {\n      mcp_method: 'tasks/execute',\n      request_id: mcpRequest.request_id,\n      task_params: {\n        organization_id,\n        creator_user_id,\n        task_type,\n        parameters,\n        priority,\n        project_id\n      },\n      timestamp: mcpRequest.timestamp\n    };\n    \n  case 'agent/info':\n    // Return agent information\n    return {\n      mcp_method: 'agent/info',\n      request_id: mcpRequest.request_id,\n      timestamp: mcpRequest.timestamp\n    };\n    \n  case 'capabilities/list':\n    // Return agent capabilities\n    return {\n      mcp_method: 'capabilities/list',\n      request_id: mcpRequest.request_id,\n      timestamp: mcpRequest.timestamp\n    };\n    \n  default:\n    throw new Error(`Unsupported MCP method: ${mcpRequest.method}`);\n}"
      },
      "id": "mcp5e6f7-g8h9-0123-efgh-mcp567890123",
      "name": "Process MCP Method",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        220
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "method-check",
              "leftValue": "={{ $json.mcp_method }}",
              "rightValue": "tasks/execute",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "mcp6f7g8-h9i0-1234-fghi-mcp678901234",
      "name": "Route MCP Method",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        220
      ]
    },
    {
      "parameters": {
        "workflowId": "[A01] Master-Task-Orchestrator",
        "parameters": "={{ $json.task_params }}"
      },
      "id": "mcp7g8h9-i0j1-2345-ghij-mcp789012345",
      "name": "Execute Task via Master Orchestrator",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        1340,
        140
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  jsonrpc: '2.0',\n  result: {\n    success: true,\n    task_id: $json.task_id,\n    assigned_agent_id: $json.assigned_agent_id,\n    status: $json.status,\n    execution_time_ms: $json.execution_time_ms,\n    timestamp: $json.timestamp\n  },\n  id: $('Process MCP Method').item.json.request_id\n}) }}"
      },
      "id": "mcp8h9i0-j1k2-3456-hijk-mcp890123456",
      "name": "MCP Task Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1560,
        140
      ]
    },
    {
      "parameters": {
        "functionCode": "// Handle non-task MCP methods\nconst mcpData = $json;\n\nswitch (mcpData.mcp_method) {\n  case 'agent/info':\n    return {\n      agent_info: {\n        id: 'A01',\n        name: 'Integration-Orchestration Agent',\n        version: '1.0.0',\n        description: 'Central task orchestrator for EPRM Suite',\n        capabilities: [\n          'task_orchestration',\n          'agent_routing',\n          'protocol_adaptation',\n          'error_handling'\n        ],\n        protocols: ['MCP', 'A2A'],\n        status: 'active'\n      },\n      request_id: mcpData.request_id,\n      timestamp: mcpData.timestamp\n    };\n    \n  case 'capabilities/list':\n    return {\n      capabilities: [\n        {\n          name: 'task_orchestration',\n          description: 'Orchestrate tasks across multiple agents',\n          input_schema: {\n            type: 'object',\n            properties: {\n              task_type: { type: 'string' },\n              parameters: { type: 'object' },\n              organization_id: { type: 'string', format: 'uuid' },\n              creator_user_id: { type: 'string', format: 'uuid' }\n            },\n            required: ['task_type', 'organization_id', 'creator_user_id']\n          }\n        },\n        {\n          name: 'protocol_adaptation',\n          description: 'Adapt between different communication protocols',\n          supported_protocols: ['MCP', 'A2A']\n        }\n      ],\n      request_id: mcpData.request_id,\n      timestamp: mcpData.timestamp\n    };\n    \n  default:\n    throw new Error(`Unhandled MCP method: ${mcpData.mcp_method}`);\n}"
      },
      "id": "mcp9i0j1-k2l3-4567-ijkl-mcp901234567",
      "name": "Handle Info Methods",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  jsonrpc: '2.0',\n  result: $json.agent_info || $json.capabilities || $json,\n  id: $json.request_id\n}) }}"
      },
      "id": "mcpaj1k2-l3m4-5678-jklm-mcpa01234567",
      "name": "MCP Info Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  jsonrpc: '2.0',\n  error: {\n    code: -32000,\n    message: 'Task execution failed',\n    data: {\n      error: $json.error,\n      errorType: $json.errorType,\n      task_id: $json.task_id,\n      timestamp: $json.timestamp\n    }\n  },\n  id: $('Process MCP Method').item.json.request_id\n}) }}",
        "options": {
          "responseCode": 500
        }
      },
      "id": "mcpbk2l3-m4n5-6789-klmn-mcpb12345678",
      "name": "MCP Task Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1560,
        400
      ]
    },
    {
      "parameters": {
        "workflowId": "[CORE] Log-Event",
        "parameters": {
          "log_level": "INFO",
          "log_message": "MCP request processed successfully",
          "agent_id": "A01",
          "details": "={{ JSON.stringify({\n    mcp_method: $json.mcp_method,\n    request_id: $json.request_id,\n    client_ip: $('Parse MCP Request').item.json.client_ip,\n    processing_time_ms: Date.now() - Date.parse($json.timestamp)\n  }) }}"
        }
      },
      "id": "mcpcl3m4-n5o6-7890-lmno-mcpc23456789",
      "name": "Log MCP Success",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        1780,
        220
      ]
    },
    {
      "parameters": {
        "workflowId": "[CORE] Log-Event",
        "parameters": {
          "log_level": "ERROR",
          "log_message": "MCP request failed",
          "agent_id": "A01",
          "details": "={{ JSON.stringify({\n    error: $json.auth_error || $json.error || 'Unknown error',\n    request_id: $json.request_id,\n    client_ip: $('Parse MCP Request').item.json.client_ip,\n    mcp_method: $('Parse MCP Request').item.json.method\n  }) }}"
        }
      },
      "id": "mcpdm4n5-o6p7-8901-mnop-mcpd34567890",
      "name": "Log MCP Error",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        1120,
        400
      ]
    }
  ],
  "connections": {
    "MCP Webhook Server": {
      "main": [
        [
          {
            "node": "Parse MCP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse MCP Request": {
      "main": [
        [
          {
            "node": "Check Authentication",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Authentication": {
      "main": [
        [
          {
            "node": "Process MCP Method",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log MCP Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log MCP Error": {
      "main": [
        [
          {
            "node": "Authentication Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process MCP Method": {
      "main": [
        [
          {
            "node": "Route MCP Method",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route MCP Method": {
      "main": [
        [
          {
            "node": "Execute Task via Master Orchestrator",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Info Methods",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Task via Master Orchestrator": {
      "main": [
        [
          {
            "node": "MCP Task Success Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "MCP Task Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Info Methods": {
      "main": [
        [
          {
            "node": "MCP Info Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP Task Success Response": {
      "main": [
        [
          {
            "node": "Log MCP Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP Info Response": {
      "main": [
        [
          {
            "node": "Log MCP Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "mcp-sub",
      "name": "MCP Subworkflow"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "agent-01",
      "name": "Agent 01"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "protocol-adapter",
      "name": "Protocol Adapter"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}